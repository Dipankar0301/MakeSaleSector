public class OverrideNewPlanController { private static String clientId; private static String clientSecret; private static String tokenURL; private static String apiKey; private static String endpoint; @AuraEnabled(cacheable = true) public static List<Integer> retrivePlanNumbers(String oppId){ Id opportunityId = oppId; system.debug('recid-'+opportunityId); List<Integer> planNumbers = new List<Integer>(); List<Map<String, Object>> planNumberMap = new List<Map<String, Object>>(); getCredentials(); map<String, Object> mapJsonData = new map<String, Object>(); List<Object> theObjectList = new List<Object>(); HttpRequest httpRequest = new HttpRequest(); String strResponse = null; /** Purpose: Use Platform Cache to handle Access token in Integration. */ //Getting org partition of platform Cache Cache.OrgPartition orgPart = Cache.Org.getPartition('local.StoreOnAirAccessToken'); String accessToken = (String)orgPart.get('token'); DateTime expiry = (DateTime)orgPart.get('expiry'); //Check if access token is Null/Expired.Get the access token only when its expired or calling for the first time if( (String.isBlank(accessToken)|| expiry == NULL || expiry < system.now())){ String clientId = clientId; String clientSecret = clientSecret; String apiKey = apiKey; String tokenURL = tokenURL; //Get access Token by sending a http request Http httpToken = new Http(); HttpRequest requestToken = new HttpRequest(); requestToken.setHeader('Content-Type','application/x-www-form-urlencoded'); requestToken.setHeader('Cookie', 'XSRF-TOKEN='+apiKey); requestToken.setHeader('Authorization', 'Basic ' + EncodingUtil.base64Encode(Blob.valueOf(clientId+ ':' +clientSecret))); requestToken.setBody('grant_type='+EncodingUtil.urlEncode('client_credentials','UTF-8')); requestToken.setEndpoint(tokenURL); requestToken.setMethod('POST'); HttpResponse responseToken = httpToken.send(requestToken); system.debug('responseToken ::'+responseToken.getBody()); //let's store access token & its expiry time if (responseToken.getStatusCode() == 200) { Map<String, Object> mapResultToken = (Map<String, Object>) JSON.deserializeUntyped(responseToken.getBody()); //Storing Access Token and Expiry to Org cache orgPart.put('token',mapResultToken.get('access_token')); orgPart.put('expiry',system.now().addSeconds(3600)); } } //If token is updated then getting latest token accessToken = (String)orgPart.get('token'); expiry = (DateTime)orgPart.get('expiry'); System.debug('accessToken ::'+accessToken); System.debug('expiry ::'+expiry); //Check if access token is not Expired if(expiry > system.now()){ // saved one callout here. //Access token stored in Platform Cache and is valid to use.You can use the same access token for subsequent calls. System.debug('opportunityId ===> '+opportunityId); if(!String.isBlank(opportunityId)){ httpRequest.setEndpoint(endpoint+opportunityId); // Get OnAirPlan Numbers } httpRequest.setMethod('GET'); httpRequest.setHeader('x-api-key', apiKey); httpRequest.setHeader('Authorization', 'Bearer '+accessToken); try { Http http = new Http(); HttpResponse httpResponse = http.send(httpRequest); if (httpResponse.getStatusCode() == 200 ) { strResponse = httpResponse.getBody(); system.debug('strResponse-'+strResponse); } else {   strResponse = httpResponse.getBody();   throw new CalloutException(httpResponse.getBody()); } } catch(Exception ex) { throw ex; } } if(!String.isBlank(strResponse)) {   if(!String.isBlank(opportunityId)){   theObjectList = (List<Object>)JSON.deserializeUntyped(strResponse); } else { theObjectList = (List<Object>)JSON.deserializeUntyped(strResponse); } system.debug('theObjectList-'+theObjectList); } if(!theObjectList.isEmpty()) { for(Object obj: theObjectList){ planNumberMap.add((Map<String, Object>)obj); system.debug('planNumberMap-'+planNumberMap); } for(Map<String, Object> pNumber:planNumberMap){ String planStatus = (String)pNumber.get('planStatus'); System.debug('planStatus : '+planStatus+' planNumber : '+pNumber.get('planNumber')); if(planStatus.containsIgnoreCase(NBCUConstants.OPP_STAGE_WORKING_MOST_LIKELY) || planStatus.containsIgnoreCase(NBCUConstants.OPP_STAGE_HOLD) || planStatus.containsIgnoreCase(NBCUConstants.STAGE_ORDER)){ planNumbers.add((Integer)pNumber.get('planNumber')); system.debug('planNumber Available for Use-'+pNumber.get('planNumber')); } } return planNumbers; } else { return null; } }